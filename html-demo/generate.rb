#@
# html-demo/generate.rb -- to be run from 'rgeom' directory
#
# Generates the "RGeom visual examples" HTML file and associated images.
#
# Looks in each directory 01, 02, ... for the following items:
# 
# [description.txt] Heading and (optional) description.
#
# [in.rb] RGeom code, not including the "render" line (this program does that).
#
# [inspiration.png] An optional image showing the inspiration behind this piece
# of RGeom code.  If it's included, description.txt should include a simple
# paragraph at the end: "Inspired by ..." (e.g. Asymptote, Eukleides, TikZ)
#
# This program will generate <tt>html-demo/NN/out.png</tt> to a width of 500px.
# A side effect will be <tt>out.width</tt> to describe the width in RGeom units,
# for the reader's information.  Hopefully I can get this programmatically
# rather than through a file.
#

require 'rubygems'
require 'fattr'
require 'rio'
require 'builder'
require 'dev-utils/debug'
require 'ruby-debug'
require 'coderay'
require 'rgeom'


def inform_user(msg)
  #debug msg
  STDERR.puts msg
end


class Overall
  def initialize
    @chapters = Dir["html-demo/[0-9]*"].map { |dir| Chapter.new(dir) }
  end
  def render(filename)
    File.open(filename, "w") do |file|
      h = Builder::XmlMarkup.new(:target => file, :indent => 2)
      goforit(h)
    end
  end
  def goforit(h)
    h.html do |h|
      h.head do |h|
        h.title "RGeom Visual Examples"
        stylesheet(h)
      end
      h.body do |h|
        h.h1 "RGeom Visual Examples"
        h.p %{RGeom is a Ruby-driven geometrically-aware mathematical diagram tool.
          The specification environment is a cartesian plane, not pixel-coordinates,
          and implicit construction means you rarely enter coordinates anyway.}
        h.p %{The images below were generated by RGeom to have a width of 300px.  The width
          in RGeom units (think of a cartesian plane) is shown below the image for your
          information.}
        h.p %{This document is divided into logical segments, beginning with core
          concepts and interesting demonstrations, and continuing with in-depth examples
          of RGeom's various capabilities (triangles, circles, ...).}
        toc(h)
        @chapters.each do |chapter|
          chapter.render(h)
        end
        date = Date.today.to_s
        time = Time.now.strftime("%H:%M:%S (%Z)")
        h.p "Generated by html-demo/generate.rb on #{date} at #{time}.", :class => 'footnote'
      end
    end
  end

  def stylesheet(h)
    h.style(:type => 'text/css') do
      h.text! %{
        body {
          background-color: hsl(120, 25%, 92%);
          padding-left: 15px;
          width: 800px;
        }
        p {
          font-family: Arial, Verdana, sans;
          width: 35em;
        }
        .imgborder {
          border-style: dashed;
          border-width: 1px;
          border-color: hsl(240, 50%, 25%);
        }
        .width {
          font-size:  x-small;
          color:      gray;
          text-align: center;
        }
        .footnote {
          font-size:  x-small;
          color:      gray;
          width:      60em;
          border-top: solid, gray, 1px;
        }
        .t1 {
          border: 0;
          padding: 0;
          width: 100%;
          border-spacing: 0;
        }
      }
      h << DATA.read.indent(8)    # CodeRay stylesheet
    end
  end

  def toc(h)
    h.h3 "Table of contents"
    @chapters.each do |c|
      h.p(:class => 'tocentry') {
        h.a "#{c.number} - #{c.title}", :href => "##{c.number}"
      }
    end
  end
end




class Chapter
  fattr :number, :title, :examples
  def initialize(dir)
    bdir = File.basename(dir)
    inform_user "Chapter: #{bdir}"
    @number = $1.to_i if bdir =~ /^(\d\d)/
    @title  = $1      if bdir =~ /^\d\d-(.+)$/
    unless @number and @title
      raise "Invalid chapter directory: #{bdir}"
    end
    @title = @title.sub(/^(.)/) { $1.upcase }
    @examples = Dir["#{dir}/??"].map { |d| Example.new(d, self) }
  end
  
  def render(builder)
    h = builder
    h.a(:name => "##{@number}") {
      h.h2 "Chapter #{@number} -- #{@title}"
    }
    @examples.each do |example|
      example.render(builder)
    end
  end
end




class Example
  include RGeom
  include Math
  @@register = RGeom::Register.instance

  fattr :dir, :description, :code, :out, :width, :inspiration
  def initialize(dir, chapter)
    inform_user "  Example: #{dir}"
    @dir = dir
    @chapter = chapter
    @heading, @description, @inspiration = parse_description_txt
    @code = File.read(File.join(dir, 'in.rb'))
  end

  def inspect
    "#{@chapter.number}-#{File.basename(@dir)}"
  end

  def render(builder)
    process
    h = builder
    heading = "Example #{@chapter.number}.#{File.basename(@dir)}"
    heading << (" " + @heading) if @heading
    h.h3 heading 
    @description.each do |paragraph|
      h.p paragraph
    end
    h.table(:class => 't1') {
      h.col(:span => 1, :width => 310)
      h.col(:span => 1, :width => 480)
      h.tbody {
        h.tr {
          h.td {
            h.img :class => 'imgborder', :src => @out.sub(/^html-demo\//, '')
            width = sprintf "%3.1f", @width
            h.p "Width: #{width} units", :class => 'width'
          }
          h.td {
            code_html = CodeRay.scan(@code, :ruby).div
            h << code_html
          }
        }
      }
    }
  end

  def process
    @@register.clear!
    eval @code
    @out = file('out.png')
    RGeom::Commands.render(@out, :width => 300)
    @width = $rgeom_diagram_width
  end

  def parse_description_txt
    lines = File.readlines(file('description.txt'))
    if lines[0] =~ /^h: (.+)$/
      heading = $1.strip
      lines.shift
    end
    if lines[-1] =~ /^Inspired by (.+)$/
      inspiration = $1
      lines.pop
    end
    description = [""]
    lines.each do |line|
      if line.strip == ""
        description << ""
      else
        description.last << line
      end
    end
    out description.pp_s
    [heading, description, inspiration]
  end

  def file(name)
    File.join(@dir, name)
  end

end  # class Example

# *---------------------------------------------------------------------------*
# *                                                                           *
# *                               M  A  I  N                                  *
# *                                                                           *
# *---------------------------------------------------------------------------*

Overall.new.render("html-demo/index.html")

__END__

.CodeRay {
  background-color: #f8f8f8;
  background-color: hsl(180, 25%, 92%);
  border: 1px solid silver;
  font-family: 'Courier New', 'Terminal', monospace;
  color: #000;
}
.CodeRay pre { margin: 0px }
.CodeRay pre { margin: 5px }

div.CodeRay { }

span.CodeRay { white-space: pre; border: 0px; padding: 2px }
span.CodeRay { white-space: pre; border: 5px; padding: 5px }

table.CodeRay { border-collapse: collapse; width: 100%; padding: 2px }
table.CodeRay td { padding: 2px 4px; vertical-align: top }

.CodeRay .line_numbers, .CodeRay .no {
  background-color: #def;
  color: gray;
  text-align: right;
}
.CodeRay .line_numbers tt { font-weight: bold }
.CodeRay .no { padding: 0px 4px }
.CodeRay .code { width: 100% }

ol.CodeRay { font-size: 10pt }
ol.CodeRay li { white-space: pre }

.CodeRay .code pre { overflow: auto }

.CodeRay .debug { color:white ! important; background:blue ! important;

.CodeRay .af { color:#00C }
.CodeRay .an { color:#007 }
.CodeRay .at { color:#f08 }
.CodeRay .av { color:#700 }
.CodeRay .aw { color:#C00 }
.CodeRay .bi { color:#509; font-weight:bold }
.CodeRay .c  { color:#888; }

.CodeRay .ch { color:#04D }
.CodeRay .ch .k { color:#04D }
.CodeRay .ch .dl { color:#039 }

.CodeRay .cl { color:#B06; font-weight:bold }
.CodeRay .co { color:#036; font-weight:bold }
.CodeRay .cr { color:#0A0 }
.CodeRay .cv { color:#369 }
.CodeRay .df { color:#099; font-weight:bold }
.CodeRay .di { color:#088; font-weight:bold }
.CodeRay .dl { color:black }
.CodeRay .do { color:#970 }
.CodeRay .dt { color:#34b }
.CodeRay .ds { color:#D42; font-weight:bold }
.CodeRay .e  { color:#666; font-weight:bold }
.CodeRay .en { color:#800; font-weight:bold }
.CodeRay .er { color:#F00; background-color:#FAA }
.CodeRay .ex { color:#F00; font-weight:bold }
.CodeRay .fl { color:#60E; font-weight:bold }
.CodeRay .fu { color:#06B; font-weight:bold }
.CodeRay .gv { color:#d70; font-weight:bold }
.CodeRay .hx { color:#058; font-weight:bold }
.CodeRay .i  { color:#00D; font-weight:bold }
.CodeRay .ic { color:#B44; font-weight:bold }

.CodeRay .il { background: #eee; color: black }
.CodeRay .il .il { background: #ddd }
.CodeRay .il .il .il { background: #ccc }
.CodeRay .il .idl { font-weight: bold; color: #777 }

.CodeRay .im { color:#f00; }
.CodeRay .in { color:#B2B; font-weight:bold }
.CodeRay .iv { color:#33B }
.CodeRay .la { color:#970; font-weight:bold }
.CodeRay .lv { color:#963 }
.CodeRay .oc { color:#40E; font-weight:bold }
.CodeRay .of { color:#000; font-weight:bold }
.CodeRay .op { }
.CodeRay .pc { color:#038; font-weight:bold }
.CodeRay .pd { color:#369; font-weight:bold }
.CodeRay .pp { color:#579; }
.CodeRay .ps { color:#00C; font-weight: bold; }
.CodeRay .pt { color:#349; font-weight:bold }
.CodeRay .r, .kw  { color:#080; font-weight:bold }

.CodeRay .ke { color: #808; }
.CodeRay .ke .dl { color: #606; }
.CodeRay .ke .ch { color: #80f; }
.CodeRay .vl { color: #088; }

.CodeRay .rx { background-color:#fff0ff }
.CodeRay .rx .k { color:#808 }
.CodeRay .rx .dl { color:#404 }
.CodeRay .rx .mod { color:#C2C }
.CodeRay .rx .fu  { color:#404; font-weight: bold }

.CodeRay .s { background-color:#fff0f0; color: #D20; }
.CodeRay .s .s { background-color:#ffe0e0 }
.CodeRay .s .s  .s { background-color:#ffd0d0 }
.CodeRay .s .k { }
.CodeRay .s .ch { color: #b0b; }
.CodeRay .s .dl { color: #710; }

.CodeRay .sh { background-color:#f0fff0; color:#2B2 }
.CodeRay .sh .k { }
.CodeRay .sh .dl { color:#161 }

.CodeRay .sy { color:#A60 }
.CodeRay .sy .k { color:#A60 }
.CodeRay .sy .dl { color:#630 }

.CodeRay .ta { color:#070 }
.CodeRay .tf { color:#070; font-weight:bold }
.CodeRay .ts { color:#D70; font-weight:bold }
.CodeRay .ty { color:#339; font-weight:bold }
.CodeRay .v  { color:#036 }
.CodeRay .xt { color:#444 }

.CodeRay .ins { background: #afa; }
.CodeRay .del { background: #faa; }
.CodeRay .chg { color: #aaf; background: #007; }
.CodeRay .head { color: #f8f; background: #505 }

.CodeRay .ins .ins { color: #080; font-weight:bold }
.CodeRay .del .del { color: #800; font-weight:bold }
.CodeRay .chg .chg { color: #66f; }
.CodeRay .head .head { color: #f4f; }
