# Autogenerated from a Treetop grammar. Edits may be lost.


module Parameters
  include Treetop::Runtime

  def root
    @root || :parameters
  end

  module Parameters0
    def sep
      elements[0]
    end

    def parameter
      elements[1]
    end
  end

  module Parameters1
    def parameter
      elements[0]
    end

  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_parameter
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_sep
        s3 << r4
        if r4
          r5 = _nt_parameter
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Parameters0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Parameters1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  module Parameter0
    def colon
      elements[0]
    end

    def parameter_type
      elements[1]
    end
  end

  module Parameter1
    def parameter_name
      elements[0]
    end

  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_parameter_name
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_colon
      s3 << r4
      if r4
        r5 = _nt_parameter_type
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Parameter0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Parameter1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  def _nt_sep
    start_index = index
    if node_cache[:sep].has_key?(index)
      cached = node_cache[:sep][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(', ', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure(', ')
      r0 = nil
    end

    node_cache[:sep][start_index] = r0

    r0
  end

  def _nt_colon
    start_index = index
    if node_cache[:colon].has_key?(index)
      cached = node_cache[:colon][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(': ', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure(': ')
      r0 = nil
    end

    node_cache[:colon][start_index] = r0

    r0
  end

  def _nt_parameter_name
    start_index = index
    if node_cache[:parameter_name].has_key?(index)
      cached = node_cache[:parameter_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_word

    node_cache[:parameter_name][start_index] = r0

    r0
  end

  module ParameterType0
    def data
      puts "About to call [[ parameter_type.text_value ]]"
      parameter_type.text_value
      #[simple_type.text_value, array_type.text_value, compound_type.text_value]
      #text_value
      #elements[0].data
    end
  end

  def _nt_parameter_type
    start_index = index
    if node_cache[:parameter_type].has_key?(index)
      cached = node_cache[:parameter_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_simple_type
    if r1
      r0 = r1
    else
      r2 = _nt_array_type
      if r2
        r0 = r2
      else
        r3 = _nt_compound_type
        r3.extend(ParameterType0)
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:parameter_type][start_index] = r0

    r0
  end

  module CompoundType0
    def simple_type
      elements[1]
    end
  end

  module CompoundType1
    def simple_type
      elements[1]
    end

  end

  module CompoundType2
    def data
      [:compound, text_value]
    end
  end

  def _nt_compound_type
    start_index = index
    if node_cache[:compound_type].has_key?(index)
      cached = node_cache[:compound_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_simple_type
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          if has_terminal?(',', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r5 = nil
          end
          s4 << r5
          if r5
            r6 = _nt_simple_type
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(CompoundType0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          if has_terminal?(')', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r7 = nil
          end
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CompoundType1)
      r0.extend(CompoundType2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:compound_type][start_index] = r0

    r0
  end

  module SimpleType0
    def default_value
      elements[1]
    end
  end

  module SimpleType1
    def word
      elements[0]
    end

  end

  module SimpleType2
    def data
      [:simple, text_value]
      #[:simple, word.text_value, :default, default_value.text_value]
    end
  end

  def _nt_simple_type
    start_index = index
    if node_cache[:simple_type].has_key?(index)
      cached = node_cache[:simple_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_word
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?('=', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('=')
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_default_value
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(SimpleType0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SimpleType1)
      r0.extend(SimpleType2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:simple_type][start_index] = r0

    r0
  end

  module ArrayType0
    def comma_separated_words
      elements[1]
    end

  end

  module ArrayType1
    def data
      [:array, text_value]
      #[:array, comma_separated_words.text_value]
    end
  end

  def _nt_array_type
    start_index = index
    if node_cache[:array_type].has_key?(index)
      cached = node_cache[:array_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_comma_separated_words
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ArrayType0)
      r0.extend(ArrayType1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array_type][start_index] = r0

    r0
  end

  def _nt_default_value
    start_index = index
    if node_cache[:default_value].has_key?(index)
      cached = node_cache[:default_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[A-z0-9.-]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:default_value][start_index] = r0

    r0
  end

  module CommaSeparatedWords0
    def word
      elements[1]
    end
  end

  module CommaSeparatedWords1
    def word
      elements[0]
    end

  end

  def _nt_comma_separated_words
    start_index = index
    if node_cache[:comma_separated_words].has_key?(index)
      cached = node_cache[:comma_separated_words][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_word
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?(',', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_word
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(CommaSeparatedWords0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CommaSeparatedWords1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comma_separated_words][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-z_]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:word][start_index] = r0

    r0
  end

end

class ParametersParser < Treetop::Runtime::CompiledParser
  include Parameters
end


